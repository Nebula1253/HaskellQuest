Recursion is a way of defining functions where the function is applied within its own definition.

The factorial function is a good example. You could defined it as f(x) = x * f(x - 1). 

However, this would never terminate, which is why we need a special case for f(0) = 1. Having this special case is <i>incredibly</i> important to ensure the program doesn't run forever.

These are known as the recursive case and base case respectively - case expressions and pattern-matching are immensely useful here. The factorial function in Haskell would look like this:

    factorial :: Int -> Int
    factorial 0 = 1
    factorial x = x * factorial (x - 1)

Of course, this still fails to terminate when supplied with a negative number, but that's true of the actual factorial function as well.

Recursion is an incredibly powerful tool, and it comes in handy for splitting a larger problem into multiple smaller sub-problems.
