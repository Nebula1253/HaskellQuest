Expressions are sections of code that can be evaluated, meaning they produce a value. For instance, 2 + 2 is an expression that yields the value 4.
In Haskell, expressions can be as simple as a single value (so '4' on its own would also be valid) or as complex as multiple nested function calls with multiple arguments.

Functions, meanwhile, are akin to the mathematical definition: they take input value(s) and return an output value.
Within Haskell, functions need to follow a specific format. Let's take a look at an example:

    incrementInt :: Int -> Int
    incrementInt x = x + 1
    
The first line is a <i>type signature</i> for the function; here, it takes an Int input and returns an Int output.
The second line is the function <i>declaration</i>: it essentially describes what the function does, and what the output value should be.

A function can have multiple input values in Haskell: a function of type "Int -> Int -> Int" takes two Ints and returns an Int.
    