In Haskell, functions can do different things, depending on the input values. For instance, if you wanted a function that halved a number and then rounded it down, you could define that as n/2 for an even n, but (n-1) / 2 for an odd n. In Haskell, this function would look like:

    floorHalve :: Int -> Int
    floorHalve n
        | x `mod` 2 == 0 = n / 2
        | otherwise      = (n - 1) / 2

You can use as many Bool clauses as you like: the 'otherwise' expression is the one that gets executed if none of the Bool expressions hold true.
Haskell does also have 'if-then-else' statements, but these <i>case expressions</i> are a lot more readable for multiple conditions.

Additionally, the concept of pattern-matching can be used here too. With pattern-matching, you can specify a pattern that your input value should match to. If it does, you can define the output value differently, or extract information from the input value.

Let's look at a trivial function that returns "Lucky!" if the integer 7 is passed to it, or "Unlucky..." for any other integer. The function could then be defined like this:

    lucky :: Int -> String
    lucky 7 = "Lucky!"
    lucky x = "Unlucky..."

Here, the first definition pattern-matches specifically against 7, while the second pattern-matches on any possible string. Here, the ordering matters; if the "lucky x" pattern came first, then the function would incorrectly return "Unlucky..." for 7.

This can then be combined with the fact that types can have multiple data constructors. For instance, take the earlier Shape example:

    data Shape = Circle Float Float Float | Rectangle Float Float Float Float

If you wanted to write a function 'size' that returned the size for any Shape, it would be written as follows:

    size :: Shape -> Float
    size (Circle x y r) = ...
    size (Rectangle x y a b) = ...

Here, because we're pattern-matching against the constructors, we can also extract the floats that would have been supplied when creating the Shape. Thus, the size calculation can use those values.
    