Functions can behave differently based on their input values.

Pattern-matching allows you to specify patterns to match your input value to, and define the function differently for each.
For example:

    lucky :: Int -> String
    lucky 7 = "Lucky!"
    lucky x = "Unlucky..."

Ordering matters - placing "lucky x" first would cause the function to incorrectly return "Unlucky..." for 7.

You can use this with types that have multiple data constructors. For instance:

    data Shape = Circle Float Float Float | Rectangle Float Float Float Float

A 'size' function for any Shape would look like this:

    size :: Shape -> Float
    size (Circle x y r) = ...
    size (Rectangle x y a b) = ...

Pattern-matching against the constructors allows us to extract the floats from the Shape, to use in the function definition.
Patterns can be used <i>anywhere</i> in an expression to extract information from inputs or variables.

Top-level patterns can also have boolean <i>guards</i>. A function to halve an integer and round it down could return n/2 for an even n, but (n-1) / 2 for an odd n. 
In Haskell, this function would look like:

    floorHalve :: Int -> Int
    floorHalve n
        | mod n 2 == 0 = div n 2
        | otherwise      = div (n - 1) 2

Multiple guards can be used. The 'otherwise' clause gets executed if none of them hold true.
While Haskell has 'if-then-else' statements, these are a lot more readable for multiple conditions.

Pattern-matching is just syntactic sugar for <i>case expressions</i>. The earlier function, rewritten, would look like:

    floorHalve :: Int -> Int
    floorHalve n = case mod n 2 of
                            0 -> div n 2
                            _ -> div (n - 1) 2