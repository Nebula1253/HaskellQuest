type Size = Int
type Power = Int

data Fractal = Fractal Size
data Laser = Laser Power

fire :: Fractal -> Laser
fire (Fractal n) = Laser (power n)
-- the power of the laser is based on the size of this Fractal
-- so lasers from smaller Fractals would cause less damage

-- PLAYER CODE
-- write a function that halves Dr. Fractal into two Fractals, then recursively halves those Fractals;
-- the result should be a list of the split Fractals. 
-- The function should stop when you reach a Fractal with an odd size!

split :: Fractal -> [Fractal]
split fractal = undefined -- INPUT HERE --

-- hint: Haskell has 'even' and 'odd' functions that return a Bool, 
-- and a 'div' function that performs integer division

-- TEST CODE
power :: Size -> Power
power n = n -- doesn't really matter

splitRef :: Fractal -> [Fractal]
splitRef (Fractal n)
    | even n         = splitRef (Fractal (div n 2)) ++ splitRef (Fractal (div n 2))
    | otherwise      = [Fractal n]

fireRef :: Fractal -> Laser
fireRef (Fractal n) = Laser n

instance Eq Laser where
    (Laser p1) == (Laser p2) = p1 == p2

instance Eq Fractal where
    (Fractal s1) == (Fractal s2) = s1 == s2

main :: IO()
main = do
    let splitF = split (Fractal 8)
    let splitFRef = splitRef (Fractal 8)

    let fireCheck = fire (Fractal 8) == fireRef (Fractal 8)
    if not fireCheck
        then
            print "error: You've modified the fire function! You can't do that!"
        else
            print (splitF == splitFRef)