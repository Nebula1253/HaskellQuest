type Size = Int
type Power = Int

data Fractal = Fractal Size
data Laser = Laser Power

fire :: Fractal -> Laser
fire (Fractal n) = Laser (power n)
-- the power of the laser is based on the size of this Fractal
-- so lasers from smaller Fractals would cause less damage

-- PLAYER 1 CODE
-- write a function that halves Dr. Fractal into two Fractals, then recursively halves those Fractals;
-- the result should be a list of the split Fractals. 
-- The function should stop when you reach a Fractal with an odd size!

split :: Fractal -> [Fractal]
split fractal = undefined -- INPUT HERE --

-- hint: Haskell has 'even' and 'odd' functions that return a Bool, 
-- and a 'div' function that performs integer division

-- PLAYER 2 CODE
-- write a function that halves a Laser into two Lasers, then recursively halves those Lasers;
-- the result should be a list of the split Lasers. 
-- The recursion should stop when you reach a Laser with an odd power!

depower :: Laser -> [Laser]
depower laser = undefined -- INPUT HERE --

-- hint: Haskell has 'even' and 'odd' functions that return a Bool, 
-- and a 'div' function that performs integer division

-- TEST CODE
power :: Size -> Power
power n = 8 * n -- doesn't really matter

splitRef :: Fractal -> [Fractal]
splitRef (Fractal n)
    | even n         = splitRef (Fractal (div n 2)) ++ splitRef (Fractal (div n 2))
    | otherwise      = [Fractal n]

depowerRef :: Laser -> [Laser]
depowerRef (Laser n)
    | even n         = depowerRef (Laser (div n 2)) ++ depowerRef (Laser (div n 2))
    | otherwise      = [Laser n]

instance Eq Laser where
    (Laser p1) == (Laser p2) = p1 == p2

instance Eq Fractal where
    (Fractal s1) == (Fractal s2) = s1 == s2

main :: IO()
main = do
    let splitCheck = split (Fractal 8) == splitRef (Fractal 8)
    let depowerCheck = depower (Laser 8) == depowerRef (Laser 8)

    if splitCheck
        then
            if depowerCheck
                then
                    print "True"
                else
                    print "error: The split function works as expected, but the depower function doesn't!"
        else
            if depowerCheck
                then
                    print "error: The depower function works as expected, but the split function doesn't!"
                else
                    print "error: Neither function works as expected!"

    print ("Additional: " ++ show (splitCheck, depowerCheck))