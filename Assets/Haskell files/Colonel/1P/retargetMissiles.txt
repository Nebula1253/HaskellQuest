type Target = String
type Angle = Float

data Missile = Missile Target Angle
-- represents homing missiles; the angle is the starting 
-- angle of the missile

launch :: Target -> Int -> [Missile]
launch t n = [Missile t (angleGen i) | i <- [1..n]]
-- this launches n missiles at target t with random start angles

-- PLAYER CODE
-- write a function to retarget all Missiles
-- we'll be using this to fire them back at the enemy!
retarget :: [Missile] -> Target -> [Missile]
retarget missiles t = -- INPUT HERE --

-- TEST CODE
angleGen :: Int -> Float
angleGen i = fromIntegral i -- the player's not going to see this, the definition is just here to stop a compiler error

main :: IO()
main = do
  let missiles = launch "player" 5
  let newMissiles = retarget missiles "enemy"
  let retargetCheck = (and [t == "enemy" | (Missile t _) <- newMissiles]) && not (null newMissiles) && (and [a == b | (Missile _ a) <- newMissiles | (Missile _ b) <- missiles]) && (length missiles == length newMissiles)
  let wrongTargets = [t | Missile t _ <- newMissiles, t /= "enemy"]
  if null wrongTargets
    then
      print(retargetCheck)
    else if head wrongTargets == "player"
      then
        print("error: Missiles still target player")
      else
        print("error: " ++ head wrongTargets ++ " is not a valid target")