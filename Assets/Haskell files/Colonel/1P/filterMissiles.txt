type Position = Int

data Missile = Missile Position Bool 
-- represents a missile, the bool is whether the missile 
-- is active or not

launch :: Int -> [Missile]
launch n = [Missile i (randomGen i) | i <- [1..n]]
-- randomGen: a function that randomly decides if the missile is active or not; 
-- one missile per barrage won't hurt you

-- PLAYER CODE
-- write a function to include only the INACTIVE missiles: 
-- we'll be using this to interfere with the attack!
filterMissiles :: [Missile] -> [Missile]
filterMissiles missiles = undefined -- INPUT HERE --

-- keep the missile angle position, though -- the Colonel's internal
-- systems might notice if you don't!

-- TEST CODE
randomGen :: Int -> Bool
randomGen i = False -- who cares lol the player's not gonna see this, the definition is just here to stop a compiler error

main :: IO()
main = do
    let missiles = [Missile 1 True, Missile 2 False, Missile 3 True, Missile 4 True]
    let newMissiles = filterMissiles missiles
    let highlightCheck = (and [b == False | (Missile _ b) <- newMissiles]) 
                        && (and [a == b | (Missile a x) <- missiles, not x | (Missile b _) <- newMissiles]) 

    print(not (null newMissiles) && highlightCheck)
