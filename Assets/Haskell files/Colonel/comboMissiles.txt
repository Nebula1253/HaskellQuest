type Position = Int
type ID = String

data Missile = Missile ID Position
-- this denotes a regular missile

launch :: Int -> [Missile]
launch n = [Missile (idGen i) i | i <- [1..n]]

type Target = String
type Angle = Float

data HMissile = HMissile Target Angle
-- this denotes a homing missile

launchHoming :: Target -> Int -> [HMissile]
launchHoming t n = [HMissile t (angleGen i)| i <- [1..n]]

retarget :: HMissile -> Target -> HMissile
retarget (HMissile _ a) t = HMissile t a

-- write a function to make the homing missiles target the regular missiles
-- you'll have to set the regular missiles' ID as the target
backfire :: [Missile] -> [HMissile] -> [HMissile]
backfire missiles hMissiles = -- INPUT HERE --

-- TEST CODE
angleGen :: Int -> Float
angleGen i = 0.0 -- who cares lol the player's not gonna see this, the definition is just here to stop a compiler error

idGen :: Int -> String
idGen i = "missile" ++ show i

main :: IO()
main = do
    let missiles = launch 5
    let homingMissiles = launchHoming "player" 5
    let newHomingMissiles = backfire missiles homingMissiles
    let backfireCheck = and [t == "missile" ++ show i | (HMissile t _) <- newHomingMissiles | i <- [1..5]]
    print(not (null newHomingMissiles) && backfireCheck)
