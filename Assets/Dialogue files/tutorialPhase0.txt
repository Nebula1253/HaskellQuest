Wh... where am I? What's happened to me?

Hey, relax. You've managed to stumble into the Lambda Cave. You've been granted... a great power, to say the least.

"Lambda Cave"? Then the legends were true! But... wouldn't that make you...?

I am... what remains of... LAMBDA-MAN, famed hero and bastion of functional programming.
In... the final battle, I was greatly injured. What you see now is just a hologram; my body is healing beneath.

But those evil forces, the ones who've perverted Haskell's power for their own gain... they're still out there.

Yes. That is why I granted you the LAMBDA GAUNTLET, on your right hand. It gives you the power to defeat your enemies.

What does it do?

Those monsters and adversaries in your path... they're going to try and attack you, and you're going to need some way to defend yourself.
The Lambda Gauntlet does exactly that. You can examine the code within your opponents and, most importantly, you can <i>change it</i>.

That's... incredible! That's just what the world needs!

Yes, but you're gonna have to learn how to use it.
It all begins with <i>types</i> and <i>expressions</i>...
Types, as you can guess, are how Haskell describes the kind of data you're working with. There are a few standard types in Haskell:
1) Int: an integer within the range -2<sup>29</sup> to (2<sup>29</sup> - 1), and Integer: an unbounded integer
2) Float: a floating-point number, and Double: a double-precision float
3) Char: a single character (e.g. 'a', '1', '$')
4) Bool: a boolean value, either True or False
Expressions, meanwhile, are sections of code that can be evaluated to produce a value.

So like the mathematical definition? Like 2 + 2 being an expression that yields the value 4.

Yeah, exactly. That's going to be a common pattern in Haskell: think about the mathematical basis of things.
In Haskell, expressions can be as simple as a single value or as complex as a function call with multiple arguments.
Types and expressions on their own aren't of much use, however. This brings us to functions.
Functions are also like the mathematical definition: they take one or more inputs and return an output value.
Within Haskell, functions need to follow a very specific format.
They need to include a <i>type signature</i> e.g. "incrementInt :: Int -> Int". Here, "Int -> Int" is the function's type: takes an Int and returns an Int.

And I'm assuming the next line is what the function does, like "incrementInt x = x + 1"?

Right in one! In Haskell, that's called the <i>function declaration</i>.
A function can also have multiple inputs in Haskell. An example would be "addInts :: Int -> Int -> Int". 
There, since the last type has to be the output, you can tell that the function has two Int inputs.
The function declaration is then, logically, "addInts x y = x + y".
Of course, this information is all well and good, but I still need to know you can defend yourself.

...how are you going to do that?

Attack you.

Wait, <i>what</i>?!

Oh, don't worry! It's quite a simple attack, you should be able to avoid taking damage quite easily.
Plus, if you do get hit, I'll heal you right back up once you've got through this phase.